{
	"info": {
		"_postman_id": "b2cf6f32-92f4-41a5-bff7-ef3e22212668",
		"name": "postman-collection",
		"description": "This is a template for postman collections in CS314.",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "config",
			"item": [
				{
					"name": "Config Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c53e4ea5-5ae6-445b-bc04-143b4383efb9",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"JSON test\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"requestType test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.requestType).to.eql (\"config\");\r",
									"});\r",
									"\r",
									"pm.test(\"serverName test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.serverName).to.be.a (\"string\");\r",
									"    pm.expect(jsonData.serverName).to.match(/[tT][0-9][0-9] .*/)\r",
									"})\r",
									"\r",
									"pm.test(\"features test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.features).to.not.equal(null);\r",
									"    pm.expect(jsonData.features).to.contain(\"config\");\r",
									"    pm.expect(jsonData.features).to.contain(\"distances\");\r",
									"});\r",
									"\r",
									"pm.test('Schema test', function () {\r",
									"    var Ajv = require(\"ajv\");\r",
									"    var ajv = new Ajv({logger:console});\r",
									"    var schema = {\r",
									"        \"properties\": {\r",
									"            \"serverName\": {\r",
									"                \"type\": \"string\",\r",
									"                \"minlength\":3\r",
									"            },\r",
									"            \"requestType\": {\r",
									"                \"type\" : \"string\"\r",
									"            },\r",
									"            \"features\": {\r",
									"                \"type\":\"array\"\r",
									"            }\r",
									"        }\r",
									"    };\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ef049d9c-3a41-40a8-b18b-043708bc6d54",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"requestType\": \"config\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/config"
					},
					"response": []
				}
			],
			"id": "cb0164ca-b611-41a2-bcb8-3a12010200fd"
		},
		{
			"name": "Distances",
			"item": [
				{
					"name": "Distance Min Radius No Places",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8afa0ea5-857d-4436-952b-9155a9f92fbf",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"requestType test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.requestType).to.eql (\"distances\");\r",
									"});\r",
									"\r",
									"pm.test(\"earthRadius test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.earthRadius).to.eql(1.0);\r",
									"});\r",
									"\r",
									"pm.test(\"places test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.places).to.not.equal(null);\r",
									"    pm.expect(jsonData.places.length).to.equal(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "508aa64b-0159-44a6-a5ff-4da39ef46f30",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"requestType\": \"distances\",\r\n    \"earthRadius\": 1,\r\n    \"places\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/api/distances"
					},
					"response": []
				}
			],
			"id": "1ef61dd5-e179-4525-a5ef-21ba2767fe9c"
		},
		{
			"name": "Tour",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8509d0ae-014f-423b-b0b9-cecaf266f98f",
								"exec": [
									"pm.test(\"Status test\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"requestType test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.requestType).to.eql (\"distances\");\r",
									"});\r",
									"\r",
									"pm.test(\"earthRadius test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.earthRadius).to.eql(1.0);\r",
									"});\r",
									"\r",
									"pm.test(\"places test\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.places).to.not.equal(null);\r",
									"    pm.expect(jsonData.places.length).to.equal(0);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f82288ff-172f-47c7-a2d9-cbfd73468951",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"requestType\" : \"tour\",\r\n\"earthRadius\" : 3959.0,\r\n\"response\"    : 1.0, \r\n\"places\"      :    [{\"name\":\"Coors Field\",\"longitude\":\"-104.99\",\"latitude\":\"39.75\"},\r\n\t\t   {\"name\":\"Citizens Bank Park\",\"longitude\":\"-75.17\",\"latitude\":\"39.91\"},\r\n\t\t   {\"name\":\"Yankee Stadium\",\"longitude\":\"-73.93\",\"latitude\":\"40.83\"},\r\n\t\t   {\"name\": \"PETCO Park\",\"longitude\":\"-117.16\",\"latitude\":\"32.71\"},\r\n\t\t   {\"name\":\"Citi Field\",\"longitude\":\"-73.85\",\"latitude\":\"40.76\"},\r\n\t\t   {\"name\":\"T-Mobile Park\",\"longitude\":\"-122.33\",\"latitude\":\"47.59\"},\r\n\t\t   {\"name\":\"Truist Park\",\"longitude\":\"-84.47\",\"latitude\":\"33.89\"}]\r\n}"
						},
						"url": "https://github.com/CSU-CS-314-Fall-2022/product/blob/main/specifications/protocol/tour/TourRequest.json"
					},
					"response": []
				}
			],
			"id": "5ee03296-d3de-433f-8621-78acebf546fa"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "baf62503-873c-45ee-afd5-ee13f0eba1b2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "11f330e1-fe60-456d-a7b8-1263fb79c81a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a592d82c-aff2-48c3-baae-532c857eb637",
			"key": "BASE_URL",
			"value": "https://black-bottle.cs.colostate.edu:31416/"
		},
		{
			"id": "c2c1e7c8-c594-435c-95b0-bdad05748a99",
			"key": "TEAM_NAME",
			"value": "txx team name",
			"disabled": true
		}
	]
}